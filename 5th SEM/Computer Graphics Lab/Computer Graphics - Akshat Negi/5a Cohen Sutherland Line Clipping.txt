#include <GL/freeglut.h>
#include <iostream>
using namespace std;

// Defining region codes
const int INSIDE = 0;  // 0000
const int LEFT = 1;    // 0001
const int RIGHT = 2;   // 0010
const int BOTTOM = 4;  // 0100
const int TOP = 8;     // 1000

// Defining x_max, y_max, x_min, y_min for clipping rectangle
const int x_max = 250;
const int y_max = 250;
const int x_min = 150;
const int y_min = 150;

// Function to compute region code for a point (x, y)
int computeCode(double x, double y) {
    int code = INSIDE;

    if (x < x_min) code |= LEFT;
    else if (x > x_max) code |= RIGHT;
    if (y < y_min) code |= BOTTOM;
    else if (y > y_max) code |= TOP;

    return code;
}

// Function to draw the clipping boundary
void drawBoundary() {
    glColor3f(1.0, 0.0, 0.0); // Red color for the boundary
    glBegin(GL_LINE_LOOP);
    glVertex2f(x_min, y_min);
    glVertex2f(x_max, y_min);
    glVertex2f(x_max, y_max);
    glVertex2f(x_min, y_max);
    glEnd();
}

// Function to draw a line with specific color
void drawLine(float x1, float y1, float x2, float y2, float r, float g, float b) {
    glColor3f(r, g, b); // Set the color for the line
    glBegin(GL_LINES);
    glVertex2f(x1, y1);
    glVertex2f(x2, y2);
    glEnd();
}

// Cohen-Sutherland Line Clipping Algorithm
void cohenSutherlandClip(double x1, double y1, double x2, double y2) {
    int code1 = computeCode(x1, y1);
    int code2 = computeCode(x2, y2);

    bool accept = false;

    while (true) {
        if ((code1 == 0) && (code2 == 0)) {
            // If both endpoints lie within the rectangle
            accept = true;
            break;
        }
        else if (code1 & code2) {
            // If both endpoints are outside the rectangle in the same region
            break;
        }
        else {
            // Some segment of the line lies within the rectangle
            int code_out;
            double x, y;

            if (code1 != 0) code_out = code1;
            else code_out = code2;

            // Find intersection point
            if (code_out & TOP) {
                x = x1 + (x2 - x1) * (y_max - y1) / (y2 - y1);
                y = y_max;
            }
            else if (code_out & BOTTOM) {
                x = x1 + (x2 - x1) * (y_min - y1) / (y2 - y1);
                y = y_min;
            }
            else if (code_out & RIGHT) {
                y = y1 + (y2 - y1) * (x_max - x1) / (x2 - x1);
                x = x_max;
            }
            else if (code_out & LEFT) {
                y = y1 + (y2 - y1) * (x_min - x1) / (x2 - x1);
                x = x_min;
            }

            // Replace the point outside the rectangle with the intersection point
            if (code_out == code1) {
                x1 = x;
                y1 = y;
                code1 = computeCode(x1, y1);
            }
            else {
                x2 = x;
                y2 = y;
                code2 = computeCode(x2, y2);
            }
        }
    }

    if (accept) {
        cout << "Line accepted from (" << x1 << ", " << y1 << ") to (" << x2 << ", " << y2 << ")\n";
        drawLine(x1, y1, x2, y2, 1.0, 0.0, 0.0); // Draw the clipped line in red
    }
    else {
        cout << "Line rejected\n";
    }
}

// Function to display the content
void display() {
    glClear(GL_COLOR_BUFFER_BIT);  // Clear the screen

    drawBoundary();  // Draw the clipping boundary

    // Prompt the user for input coordinates
    double x1, y1, x2, y2;
    cout << "Enter coordinates for the line (x1, y1, x2, y2): ";
    cin >> x1 >> y1 >> x2 >> y2;

    drawLine(x1, y1, x2, y2, 0.0, 1.0, 0.0);  // Draw the original line in green

    cout << "Press any key to clip the line.\n";
    cohenSutherlandClip(x1, y1, x2, y2);  // Clip the line

    glFlush();  // Render now
}

// Function to set up OpenGL projection and modelview matrices
void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0); // Set background color to white
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 400, 0, 400);  // Define the 2D orthographic projection
}

int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 800);  // Set the window size
    glutCreateWindow("Cohen Sutherland Line Clipping - Akshat Negi");  // Create the window
    init();  // Initialize OpenGL state

    // Register display callback function
    glutDisplayFunc(display);

    // Enter the GLUT event processing loop
    glutMainLoop();

    return 0;
}