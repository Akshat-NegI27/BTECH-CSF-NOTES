Enter the degree of the Bezier curve: 2
Enter the control points:
Point 1 (x y): 100 100
Point 2 (x y): 250 400
Point 3 (x y): 400 100

Enter the degree of the Bezier curve: 3
Enter the control points:
Point 1 (x y): 50 50
Point 2 (x y): 150 400
Point 3 (x y): 350 400
Point 4 (x y): 450 50

Enter the degree of the Bezier curve: 4
Enter the control points:
Point 1 (x y): 50 50
Point 2 (x y): 100 400
Point 3 (x y): 250 300
Point 4 (x y): 400 400
Point 5 (x y): 450 50

#include <GL/freeglut.h>
#include <iostream>
#include <vector>

struct Point {
    float x, y;
};

std::vector<Point> controlPoints;

// Function to calculate Bezier point using De Casteljau's algorithm
Point bezierPoint(float t, const std::vector<Point>& points) {
    std::vector<Point> temp = points;
    for (int j = 1; j < points.size(); ++j) {
        for (int i = 0; i < points.size() - j; ++i) {
            temp[i].x = (1 - t) * temp[i].x + t * temp[i + 1].x;
            temp[i].y = (1 - t) * temp[i].y + t * temp[i + 1].y;
        }
    }
    return temp[0];
}

// Function to render the Bezier curve
void renderBezierCurve() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 0.0, 1.0); // Blue color for Bezier curve
    glBegin(GL_LINE_STRIP);

    for (float t = 0; t <= 1; t += 0.01) {
        Point p = bezierPoint(t, controlPoints);
        glVertex2f(p.x, p.y);
    }

    glEnd();
    glFlush();
}

void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glOrtho(0.0, 500.0, 0.0, 500.0, -1.0, 1.0);
}

int main(int argc, char** argv) {
    int degree;
    std::cout << "Enter the degree of the Bezier curve: ";
    std::cin >> degree;
    controlPoints.resize(degree + 1);

    std::cout << "Enter the control points:\n";
    for (int i = 0; i <= degree; i++) {
        std::cout << "Point " << i + 1 << " (x y): ";
        std::cin >> controlPoints[i].x >> controlPoints[i].y;
    }

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Bezier Curve - Akshat Negi");
    init();
    glutDisplayFunc(renderBezierCurve);
    glutMainLoop();
    return 0;
}
