#include <GL/freeglut.h>
#include <iostream>
using namespace std; 

// Function to plot points
void plot(int x, int y) 
{
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
    glFlush();
}  

// DDA Line Drawing Algorithm
void DDA(int x1, int y1, int x2, int y2) 
{
    int dx = x2 - x1;
    int dy = y2 - y1;
    int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);  // Maximum steps
    float xIncrement = dx / (float)steps;
    float yIncrement = dy / (float)steps;
    float x = x1;
    float y = y1; 
    
    // Draw the line by plotting points
    for (int i = 0; i <= steps; i++) 
    {
        plot(round(x), round(y));
        x += xIncrement;
        y += yIncrement;
    }
}

// Function to get input from the user and call DDA
void display() 
{
    glClear(GL_COLOR_BUFFER_BIT);
    int x1, y1, x2, y2;
    cout << "Enter the coordinates of the starting points (x1, y1): ";
    cin >> x1 >> y1;
    cout << "Enter the coordinates of the end points (x2, y2): ";
    cin >> x2 >> y2;
    DDA(x1, y1, x2, y2);
} 

void init() 
{
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glColor3f(0.0, 0.0, 0.0);
    glPointSize(1.0);                   // Point size
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 500.0, 0.0, 500.0);
}

int main(int argc, char** argv) 
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);      
    glutInitWindowPosition(500, 250);
    glutCreateWindow("DDA Line Algorithm!");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
}