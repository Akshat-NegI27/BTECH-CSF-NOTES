#include <GL/freeglut.h>
#include <iostream>
using namespace std;

// Defining the clipping window boundaries
const int x_min = 10;
const int x_max = 200;
const int y_min = 10;
const int y_max = 200;

// Function to draw a line with specified color
void drawLine(float x1, float y1, float x2, float y2, float r, float g, float b) {
    glColor3f(r, g, b); // Set color for the line
    glBegin(GL_LINES);
    glVertex2f(x1, y1);
    glVertex2f(x2, y2);
    glEnd();
}

// Liang-Barsky Line Clipping Algorithm
bool liangBarskyClip(double& x1, double& y1, double& x2, double& y2) {
    double t0 = 0.0, t1 = 1.0;
    double dx = x2 - x1;
    double dy = y2 - y1;

    auto clipTest = [&](double p, double q) {
        if (p == 0) {
            if (q < 0) return false;
        }
        else {
            double t = q / p;
            if (p < 0) {
                if (t > t1) return false;
                if (t > t0) t0 = t;
            }
            else {
                if (t < t0) return false;
                if (t < t1) t1 = t;
            }
        }
        return true;
        };

    // Clip against each boundary
    if (!clipTest(-dx, x1 - x_min) || !clipTest(dx, x_max - x1) ||
        !clipTest(-dy, y1 - y_min) || !clipTest(dy, y_max - y1)) {
        return false;
    }

    // Update the points based on t0 and t1
    if (t1 < 1.0) {
        x2 = x1 + t1 * dx;
        y2 = y1 + t1 * dy;
    }
    if (t0 > 0.0) {
        x1 = x1 + t0 * dx;
        y1 = y1 + t0 * dy;
    }

    return true;
}

// Function to display the content
void display() {
    glClear(GL_COLOR_BUFFER_BIT);  // Clear the screen

    // Draw the clipping boundary (rectangle)
    glColor3f(1.0, 0.0, 0.0); // Red color for the boundary
    glBegin(GL_LINE_LOOP);
    glVertex2f(x_min, y_min);
    glVertex2f(x_max, y_min);
    glVertex2f(x_max, y_max);
    glVertex2f(x_min, y_max);
    glEnd();

    // Prompt the user for input coordinates
    double x1, y1, x2, y2;
    cout << "Enter coordinates for the line (x1, y1, x2, y2): ";
    cin >> x1 >> y1 >> x2 >> y2;

    // Draw the original line in green
    drawLine(x1, y1, x2, y2, 0.0, 1.0, 0.0);

    // Apply Liang-Barsky clipping
    bool isClipped = liangBarskyClip(x1, y1, x2, y2);

    if (isClipped) {
        // Draw the clipped line in blue and print clipped coordinates
        cout << "Clipped line from (" << x1 << ", " << y1 << ") to (" << x2 << ", " << y2 << ")\n";
        drawLine(x1, y1, x2, y2, 0.0, 0.0, 1.0);  // Draw the clipped line in blue
    }
    else {
        // Line is outside the window
        cout << "Line is outside the clipping window.\n";
    }

    glFlush();  // Render now
}

// Function to set up OpenGL projection and modelview matrices
void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0); // Set background color to white
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 400, 0, 400);  // Define the 2D orthographic projection
}

int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 800);  // Set the window size
    glutCreateWindow("Liang-Barsky Line Clipping - Akshat Negi");  // Create the window
    init();  // Initialize OpenGL state

    // Register display callback function
    glutDisplayFunc(display);

    // Enter the GLUT event processing loop
    glutMainLoop();

    return 0;
}
