c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <semaphore.h>

int main() {
    // Create a shared memory segment
    int shmid = shmget(IPC_PRIVATE, sizeof(int), 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(1);
    }

    // Attach the shared memory segment
    int *shared_var = (int *)shmat(shmid, NULL, 0);
    if (shared_var == (int *)-1) {
        perror("shmat");
        exit(1);
    }

    // Create a semaphore
    sem_t *sem = sem_open("/semaphore", O_CREAT, 0666, 1);
    if (sem == SEM_FAILED) {
        perror("sem_open");
        exit(1);
    }

    // Fork the process
    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    }

    if (pid == 0) { // Child process
        for (int i = 0; i < 10; i++) {
            // Lock the semaphore
            if (sem_wait(sem) == -1) {
                perror("sem_wait");
                exit(1);
            }

            // Increment the shared variable
            (*shared_var)++;

            // Print the shared variable
            printf("Child: %d\n", *shared_var);

            // Unlock the semaphore
            if (sem_post(sem) == -1) {
                perror("sem_post");
                exit(1);
            }

            // Sleep for a while
            sleep(1);
        }
    } else { // Parent process
        for (int i = 0; i < 10; i++) {