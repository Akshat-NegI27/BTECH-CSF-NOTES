Code 1:
#include <string.h>
// overflow into pass
int main(void)
{
    char buff[15];
    int pass = 0;
    printf("\n Enter the password : \n");
    gets(buff);
    if(strcmp(buff, "thegeekstuff"))
    {
        printf ("\n Wrong Password \n");
    }
    else
    {
        printf ("\n Correct Password \n");
        pass = 1;
    }
    if(pass)
    {
       /* Now Give root or admin rights to user*/
        printf ("\n Root privileges given to the user \n");
    }
    return 0;
}

*********************************************************************************************
Code2:

#include <cstring>
#include <iostream>
const char *PASSWORD_FILE = "rictro";
int main()
{
  
  char password[8];
  char input[8];
  std::sscanf(PASSWORD_FILE, "%s", password);
  std::cout << "Enter password: ";
  std::cin >> input;
  // Debug prints:
  std::cout << "Address of input: " << &input << "\n";
  std::cout << "Address of password: " << &password << "\n";
  std::cout << "Input: " << input << "\n";
  std::cout << "Password: " << password << "\n";
  if (std::strncmp(input,password, 8) == 0)
    std::cout << "Access granted\n";
  else
    std::cout << "Access denied\n";
  return 0;
}

*************************************************************************************

Code3:

#include <string.h>
#include <stdio.h> 
#include <stdlib.h>


void code()
{
  puts("HACKED");
  return;
}
int overflow( char * in1)
{
  char buff[8];
  strcpy(buff,in1);
  return 0;
}
int main(int argc, char **argv) 
{ 
   overflow(argv[1]); 
return 0;
}







Code4:
#include  <stdio.h> 
#include <stdlib.h>
#include <string.h>

//gcc -fno-stack-protector 

int function2()
{
puts("Malicious Code");

return 0;
}

void function()
{
  char data[8];
  //       data            RBP                                 RETURN ADDRESS
  strncpy(data,"12345678""\x01\x02\x03\x04\x05\x06\x07\x08""\x49\x51\x55\x55\x55\x55\x00\x00", 24);
 //strncpy (data,"1234567",8);
  puts("Normal Code");
}
int main(int argc, char **argv) 
{ 
// Starting in main
  function(); 
  return 0;

}